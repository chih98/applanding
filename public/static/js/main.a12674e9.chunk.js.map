{"version":3,"sources":["App.js","serviceWorker.js","index.js","img/logo.png"],"names":["App","emailAddress","data","usePalette","logo","sendMailchimp","replace","localeCompare","includes","document","getElementById","value","submit","alert","className","style","marginTop","alignItems","backgroundColor","rotation","scale","shadow","borderRadius","width","height","r1","Preset","iOS","r2","src","alt","type","onChange","event","target","onKeyDown","e","key","handleKeyDown","placeholder","onClick","backgroundImage","lightVibrant","darkVibrant","display","id","action","method","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mOAgFeA,MAvEf,WAAgB,IAIVC,EAFIC,EAASC,qBAAWC,KAApBF,KA0BR,SAASG,IAnBFJ,GAIqF,IAAtFA,EAAaK,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,cAAc,KAI7EN,EAAaO,SAAS,MAItBP,EAAaO,SAAS,MAa3BC,SAASC,eAAe,UAAUC,MAAQV,EAC1CQ,SAASC,eAAe,WAAWE,UAJjCC,MAAM,uCAaV,OACE,yBAAKC,UAAU,OAEb,yBAAKC,MAAO,CAAEC,UAAW,OAAQC,WAAY,WAC3C,kBAAC,gBAAD,CAAeF,MAAO,CAAEG,gBAAiB,eAAiBC,SAAU,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,aAAc,GAAIC,MAAO,IAAKC,OAAQ,KAChI,kBAAC,IAAD,CAAcC,GAAIC,SAAOC,IAAIF,GAAIG,GAAIF,SAAOC,IAAIC,GAAIb,MAAO,CAAEQ,MAAO,OAAQC,OAAQ,SAClF,yBAAKK,IAAKzB,IAAM0B,IAAI,8CAA8Cf,MAAO,CAAEQ,MAAO,OAAQC,OAAQ,aAIxG,yBAAKV,UAAU,eACb,wBAAIA,UAAU,SAAd,aACA,2PAEF,yBAAKA,UAAU,YACb,2BAAOiB,KAAK,QAAQC,SAAU,SAAAC,GAAK,OAAIhC,EAAegC,EAAMC,OAAOvB,OAAOwB,UAAW,SAAAC,GAAC,OArBtE,SAACA,GACP,UAAVA,EAAEC,KACJhC,IAmB4FiC,CAAcF,IAAItB,UAAU,WAAWyB,YAAY,sBAC7I,4BAAQzB,UAAU,WAAW0B,QAAS,kBAAMnC,KAAiBU,MAAO,CAAE0B,gBAAgB,oCAAD,OAAsCvC,EAAKwC,aAA3C,aAA4DxC,EAAKyC,eAAtJ,YAEF,0BAAM5B,MAAO,CAAE6B,QAAS,QAAUC,GAAG,UAAUC,OAAO,sDAAsDC,OAAO,QACjH,2BAAOhB,KAAK,SAASiB,KAAK,IAAIrC,MAAM,8BACpC,2BAAOoB,KAAK,SAASiB,KAAK,KAAKrC,MAAM,eACrC,2BAAOoB,KAAK,QAAQiB,KAAK,SAASH,GAAG,cC9DzBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASC,eAAe,SDsHpB,kBAAmB+C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.a12674e9.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './img/logo.png';\nimport SuperEllipse, { Preset } from 'react-superellipse';\nimport { ParallaxHover } from 'react-parallax-hover';\nimport { usePalette } from 'react-palette';\nimport './App.css';\n\n// TODO: add react helmet\n\nfunction App() {\n\n  const { data } = usePalette(logo);\n\n  var emailAddress;\n\n  function validateAddress() {\n    var ret = true;\n\n    if (!emailAddress) {\n      return false;\n    }\n\n    if (emailAddress.replace(\" \", \"\").replace(\"@\", \"\").replace(\".\", \"\").localeCompare(\"\") === 0) {\n      return false;\n    }\n\n    if (!emailAddress.includes(\"@\")) {\n      return false;\n    }\n\n    if (!emailAddress.includes(\".\")) {\n      return false;\n    }\n\n    return ret;\n  }\n\n  function sendMailchimp() {\n\n    if (!validateAddress()) {\n      alert(\"Please enter a valid email address.\");\n      return;\n    }\n    document.getElementById(\"MERGE0\").value = emailAddress;\n    document.getElementById(\"mc-form\").submit();\n  }\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      sendMailchimp();\n    }\n  }\n    \n  return (\n    <div className=\"App\">\n      \n      <div style={{ marginTop: \"10vh\", alignItems: \"center\" }}>\n        <ParallaxHover style={{ backgroundColor: \"transparent\" }} rotation={5} scale={2} shadow={2} borderRadius={76} width={300} height={300}>\n          <SuperEllipse r1={Preset.iOS.r1} r2={Preset.iOS.r2} style={{ width: \"101%\", height: \"101%\" }}>\n            <img src={logo} alt=\"App logo with parallax effect on mouseover.\" style={{ width: \"100%\", height: \"100%\" }} />\n          </SuperEllipse>\n        </ParallaxHover>\n      </div>\n      <div className=\"description\">\n        <h1 className=\"title\">AppLander</h1>\n        <h2>This is a super quick and easy waitlist page. Sign up below if you would like to be notified when this officially launches. I bulit it in a day, and I'll work on a script/tool to make it user friendly when I have time.</h2>\n      </div>\n      <div className=\"waitlist\">\n        <input type=\"email\" onChange={event => emailAddress = event.target.value} onKeyDown={e => handleKeyDown(e)} className=\"waitlist\" placeholder=\"Join the Waitlist\"></input>\n        <button className=\"waitlist\" onClick={() => sendMailchimp()} style={{ backgroundImage: `linear-gradient(to bottom right, ${data.lightVibrant}, ${data.darkVibrant}` }}>Sign Up</button>\n      </div>\n      <form style={{ display: \"none\" }} id=\"mc-form\" action=\"https://mbobpro.us10.list-manage.com/subscribe/post\" method=\"POST\">\n        <input type=\"hidden\" name=\"u\" value=\"35c02149bb25b588bf379cafc\"></input>\n        <input type=\"hidden\" name=\"id\" value=\"cccb924d8b\"></input>\n        <input type=\"email\" name=\"MERGE0\" id=\"MERGE0\"></input>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// const express = require('express');\n// const app = express();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.bd09a6a8.png\";"],"sourceRoot":""}